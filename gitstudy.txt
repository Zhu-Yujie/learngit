添加仓库：
    git init

add:
    git add 文件名.txt
    git add .

查看当前暂存区（stage）状态（与工作区相比改了什么文件）：
    git status

commit:
    git commit -m "comment写在这里"

查看工作区和暂存区的区别：
    git diff

查看工作区和版本库的区别：
git diff HEAD -- 文件名

丢弃工作区的某个修改：
git checkout -- readme.txt

丢弃暂存区的某个修改
git reset HEAD 文件名

版本库版本回退（撤销撤销版本库的更改）：
    查看历史记录：
        git log

        输出信息太多：
            git log --pretty=oneline

    回退上一个：
        git reset --hard HEAD^

    回退上上个：
        git reset --hard HEAD^^

    回退到指定的：
        git reset --hard 版本号（五位即可）
    
    有每一次更改（找不到版本号可以找这个）：
        git reflog

连接远程仓库：
    git remote add origin 远程仓库地址

推送上去：
    git push -u origin master
        把当前分支master推送到远程
        -u：将本地分支与远程分支关联，以后只需写 git push
    
    git push origin master
    
    git push

查看远程仓库的位置：
    learngit zhuyujie$ git remote -v

克隆远程仓库：
    git clone 远程仓库地址



分支：
    创建并切换到dev分支：
        git checkout -b dev
        git switch -c dev
        git switch 分支名

    查看当前分支：
        git branch
    
    查看远程仓库分支：
        git branch -r

    dev的更改merge到master分支:
        把master的HEAD直接移到dev的提交：
            git merge dev
        新建一个提交：
            git merge --no-ff -m "merge with no-ff" dev

    删除分支：
        git branch -d dev
    
    删除一个没有被合并过的分支：
        git branch -D feature-vulcan
    
    解决冲突：
        手动解决master上和分支的冲突后删除dev
        查看分支合并情况：
            git log --graph --pretty=oneline --abbrev-commit
        
    在dev开发时突然发现master有一个bug：
        在dev分支上：
            git stash
        切回master修复bug：
            git checkout master
            git checkout -b issue-101
            git add readme.txt
            git commit -m "fix bug 101"
        修好了，合并到 master：
            git switch master
            git merge --no-ff -m "merged bug fix 101" issue-101
            git branch -d issue-101
        回到你开发功能的 dev 分支，并恢复你藏起来的代码L：
            git switch dev
            git stash pop
        我不想再手动修一次 bug，怎么办？
            git cherry-pick 修bug时的commit-id